const http = require("http");
const express = require("express");
const path = require("path");
const { Server } = require("socket.io");
const { generateUsername } = require("unique-username-generator");
const app = express();
const server = http.createServer(app);
const io = new Server(server);
// Serve static files from the 'public' directory
app.use(express.static(path.join(__dirname, "public")));
// Handle all requests by serving the index.html file
app.get("*", (req, res) => {
	res.sendFile(path.join(__dirname, "public/index.html"));
});
// Track connected players (very basic, needs improvement)
let players = {};
let lobbies = {}; // Object to store lobby information
io.on("connection", (socket) => {
	socket.username = generateUsername();
	socket.emit("list-lobbies", lobbies);
	socket.on("join-lobby", (lobbyId) => {
		console.log(`[${socket.username}] Joined a Lobby`);
		if (lobbies[lobbyId]) {
			// Lobby exists, add player
			lobbies[lobbyId].players.push({
				id: socket.id,
				username: socket.username,
			});
			lobbies[lobbyId].gameState = "Waiting for Players";
			const playerCount = Object.keys(lobbies[lobbyId].players).length;
			// Notify other players except the joining player
			for (const player of lobbies[lobbyId].players) {
				if (player.id !== socket.id) {
					io.to(player.id).emit("player-joined", {
						...lobbies[lobbyId],
						playerCount,
						lobbyId,
					});
				}
			}
			// Send lobby state and information to the joining player
			socket.emit("lobby-joined", {
				...lobbies[lobbyId],
				playerCount,
				lobbyId,
			});
		} else {
			// Create the server side game grid
			let gameGrid = [];
			let counter = 0;
			for (let y = 0; y < 10; y++) {
				gameGrid[y] = [];
				for (let x = 0; x < 10; x++) {
					gameGrid[y][x] = {
						x: x,
						y: y,
						id: counter,
						data: {
							currentCharacter: "H",
							placedBy: null,
						},
					};
					counter++;
				}
			}
			// Create a new lobby
			lobbies[lobbyId] = {
				id: lobbyId,
				gameState: "Waiting for Player",
				players: [
					{
						id: socket.id,
						username: socket.username,
					},
				],
				gameGrid: gameGrid,
				// Add other lobby state properties
			};
			socket.lobbyId = lobbyId;
			// Inform player about new lobby (optional)
			socket.emit("lobby-created", lobbyId);
		}
		socket.broadcast.emit("list-lobbies", lobbies);
	});

	socket.on("leave-lobby", (lobbyId) => {
		if (lobbies[socket.lobbyId]) {
			// Check if lobby still exists
			const lobbyId = socket.lobbyId; // Assuming you store the lobby ID on the socket
			const playerCount =
				Object.keys(lobbies[lobbyId].players).length - 1;

			for (const player of lobbies[lobbyId].players) {
				if (player.id !== socket.id) {
					io.to(player.id).emit("player-left", {
						playerCount,
						lobbyId,
					});
				}
			}

			let i = 0;
			for (const player of lobbies[lobbyId].players) {
				if (player.id === socket.id) {
					lobbies[lobbyId].players.splice(i, 1);
					break;
				}
				i++;
			} // Remove the player from the lobby element, if he disconnects

			// Delete the lobby if nobody is left
			if (Object.keys(lobbies[lobbyId].players).length === 0) {
				delete lobbies[lobbyId];
				socket.broadcast.emit("list-lobbies", lobbies);
			}
		}
	});

	console.log(
		"Player connected:",
		socket.id,
		"randomly given username",
		socket.username
	);
	// Assign player ID (needs improvement for multiple games)
	players[socket.id] = { id: socket.id, monsters: [] };
	// Handle player disconnection (needs improvement for game state)
	socket.on("disconnect", () => {
		delete players[socket.id];
		// Update player count for the lobby the player belonged to
		if (lobbies[socket.lobbyId]) {
			// Check if lobby still exists
			const lobbyId = socket.lobbyId; // Assuming you store the lobby ID on the socket
			const playerCount =
				Object.keys(lobbies[lobbyId].players).length - 1;
			for (const player of lobbies[lobbyId].players) {
				if (player.id !== socket.id) {
					io.to(player.id).emit("player-left", {
						playerCount,
						lobbyId,
					});
				}
			}
			let i = 0;
			for (const player of lobbies[lobbyId].players) {
				if (player.id === socket.id) {
					lobbies[lobbyId].players.splice(i, 1);
					break;
				}
				i++;
			} // Remove the player from the lobby element, if he disconnects
			// Delete the lobby if nobody is left
			if (Object.keys(lobbies[lobbyId].players).length === 0) {
				delete lobbies[lobbyId];
				socket.broadcast.emit("list-lobbies", lobbies);
			}
		}
	});
	// Store the lobby ID the player joins (assuming it's received)
	socket.on("join-lobby", (lobbyId) => {
		socket.lobbyId = lobbyId; // Store the lobby ID for later use (e.g., disconnection)
	});
	socket.on("change-username", (newUsername) => {
		socket.username = newUsername;
	});
	// Placeholder for handling game logic (needs full implementation)
	socket.on("game-action", (data) => {
		if (data.action === "finish-turn") {
			const lobbyId = socket.lobbyId;
			const currentPlayers = lobbies[lobbyId].players;
			let currentPlayerIndex = lobbies[lobbyId].currentPlayerIndex; // Assuming it's already defined and initialized to 0
			// Update current player index
			currentPlayerIndex++;
			// Check if reached the end of players array
			if (currentPlayerIndex >= currentPlayers.length) {
				currentPlayerIndex = 0; // Reset to first player
			}
			// Track completed turns in the current round
			let completedTurns = lobbies[lobbyId].completedTurns || 0; // Initialize if not set
			completedTurns++;
			lobbies[lobbyId].completedTurns = completedTurns;
			lobbies[lobbyId].currentPlayerIndex = currentPlayerIndex;
			// Check if all players finished their turn (round end)
			if (completedTurns === currentPlayers.length) {
				lobbies[lobbyId].completedTurns = 0; // Reset completed turns counter
				// Implement logic for starting a new round (optional)
				// You can increment a currentRound counter or perform other round-based actions
				console.log(`[${lobbyId}] Round ended, starting new round`);
				for (const player of lobbies[lobbyId].players) {
					io.to(player.id).emit("round-end", {
						completedTurns,
					});
				}
			}
			// Broadcast the new current player to all players in the lobby
			for (const player of lobbies[lobbyId].players) {
				io.to(player.id).emit(
					"current-player",
					currentPlayers[currentPlayerIndex]
				);
			}
			console.log(
				`[${lobbyId}][${socket.id}] Finishing turn, current player: ${currentPlayers[currentPlayerIndex]}`
			);
			console.log(
				`[${lobbyId}][${socket.id}] Finishing turn, current player: ${currentPlayers[currentPlayerIndex]}`
			);
		} else if (data.action === "place-character") {
			console.log(`[${socket.lobbyId}][${socket.id}] Placed a character`);
		} else if (data.action === "move-character") {
			console.log(`[${socket.lobbyId}][${socket.id}] Moved a character`);
		} else if (data.action === "kill-character") {
			console.log(`[${socket.lobbyId}][${socket.id}] Killed a character`);
		} else if (data.action === "start-game") {
			const lobbyId = socket.lobbyId;
			const currentPlayers = lobbies[lobbyId].players;
			// Check if game isn't already started
			if (lobbies[lobbyId].gameState !== "Playing") {
				lobbies[lobbyId].gameState = "Playing";
				// Set the first player's index (assuming players[0] is the first user)
				lobbies[lobbyId].currentPlayerIndex = 0;
				// Broadcast the current player (first player) to all players in the lobby
				for (const player of lobbies[lobbyId].players) {
					io.to(player.id).emit("current-player", currentPlayers[0]);
				}
				console.log(
					`[${lobbyId}][${socket.id}] Starting game, current player: ${currentPlayers[0]}`
				);
			}
		}
	});
});
server.listen(3000, () => {
	console.log("Server listening on port 3000");
});
  10 changes: 8 additions & 2 deletions10  
public/js/client.js
Original file line number	Diff line number	Diff line change
@@ -85,12 +85,13 @@ function updateGameGridDataByCoordinates(sx, sy, newData) {
	}
}

function addBackToMainMenuButton() {
function addBackToMainMenuButton(lobbyId = null) {
	const backToMainMenuButton = document.createElement("p");
	backToMainMenuButton.className = "top-left-button";
	backToMainMenuButton.innerText = "Back to Main Menu";

	backToMainMenuButton.addEventListener("click", () => {
		socket.emit("leave-lobby", lobbyId);
		displayLobbySelector();
	});

@@ -154,7 +155,7 @@ function displayCenteredMessage(message) {

function displayWaitingForPlayersScreen(lobbyId) {
	clearMainContent();
	addBackToMainMenuButton();
	addBackToMainMenuButton(lobbyId);
	const centeredContentContainer = document.createElement("div");
	centeredContentContainer.className = "centered-content-container";

@@ -490,6 +491,11 @@ socket.on("lobby-created", (lobbyId) => {
socket.on("list-lobbies", (lobbies) => {
	console.log("got new lobbies");
	savedLobbies = lobbies;
	if (
		document.querySelector(".lobby-list-lobby-id") !== null ||
		document.querySelector(".browse-lobbies-title") !== null
	)
		displayLobbyBrowser();
});

socket.on("current-player", (playerWithTurn) => {
	console.log("Current Player");
	displayActiveGame(gameGrid, playerWithTurn);
});
socket.on("round-end", () => {
	currentRound++;
});
